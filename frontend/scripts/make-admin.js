// Clerk API –∞—à–∏–≥–ª–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ admin —ç—Ä—Ö ”©–≥”©—Ö script
// –≠–Ω—ç script-–≥ terminal –¥—ç—ç—Ä—ç—ç—Å –∞–∂–∏–ª–ª—É—É–ª–∂ –±–æ–ª–Ω–æ: node scripts/make-admin.js EMAIL

const { clerkClient } = require("@clerk/nextjs/server");

async function makeUserAdmin(email) {
  try {
    // Email —Ö–∞—è–≥–∞–∞—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π—Ö
    const users = await clerkClient.users.getUserList({
      emailAddress: [email],
    });

    if (users.length === 0) {
      console.log(`‚ùå ${email} —Ö–∞—è–≥—Ç–∞–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π`);
      return;
    }

    const user = users[0];

    // Admin role –Ω—ç–º—ç—Ö
    await clerkClient.users.updateUserMetadata(user.id, {
      publicMetadata: {
        role: "admin",
      },
    });

    console.log(`‚úÖ ${email} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ admin —ç—Ä—Ö –æ–ª–≥–æ–≥–¥–ª–æ–æ!`);
    console.log(`üë§ User ID: ${user.id}`);
    console.log(`üìß Email: ${user.emailAddresses[0]?.emailAddress}`);
  } catch (error) {
    console.error("‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
  }
}

// Command line –∞—Ä–≥—É–º–µ–Ω—Ç —à–∞–ª–≥–∞—Ö
const email = process.argv[2];

if (!email) {
  console.log("‚ùå Email —Ö–∞—è–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É!");
  console.log("–ñ–∏—à—ç—ç: node scripts/make-admin.js user@example.com");
  process.exit(1);
}

makeUserAdmin(email);
